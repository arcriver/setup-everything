name: "Install Trivy"
description: "Installs a specific version of Trivy"

inputs:
  version:
    description: "Version of Trivy to install"
    required: true
    default: "0.62.1"

  arch:
    description: "Target architecture (e.g. X64, ARM64, ARM, IA32)"
    required: false
    default: "${{ runner.arch }}"

  sha256:
    description: "SHA256 checksum to verify the downloaded tarball"
    required: true

  install-dir:
    description: "Directory to install Trivy"
    required: false
    default: "/usr/local/bin"

  github-token:
    description: "GitHub token for authentication"
    required: false
    default: "${{ github.token }}"

runs:
  using: "composite"
  steps:
    - name: Create temp directory
      id: create-temp-directory
      shell: bash
      run: |
        echo "::group::Creating temporary directory"
        TEMP_DIR=$(mktemp -d)
        echo "temp_dir=$TEMP_DIR" >> $GITHUB_OUTPUT
        echo "::endgroup::"

    - name: Download Trivy release asset
      id: download-trivy
      shell: bash
      env:
        VERSION: "${{ inputs.version }}"
        ARCH: "${{ inputs.arch }}"
        SHA256: "${{ inputs.sha256 }}"
        TEMP_DIR: "${{ steps.create-temp-directory.outputs.temp_dir }}"
        GH_TOKEN: "${{ inputs.github-token }}"
      run: |
        ARCH=$(echo "${ARCH}" | awk 'BEGIN {
          map["X64"]   = "64bit"
          map["IA32"]  = "32bit"
          map["ARM64"] = "ARM64"
          map["ARM"]   = "ARM"
        }
        {
          print ($1 in map) ? map[$1] : $1
        }')

        PATTERN="trivy_${VERSION}_Linux-${ARCH}.tar.gz"

        ./scripts/download.sh \
          -r aquasecurity/trivy \
          -v "v${VERSION}" \
          -p "${PATTERN}" \
          -s "${SHA256}" \
          -o "${TEMP_DIR}"

        TARBALL=$(find "$TEMP_DIR" -name "${PATTERN}")
        if [ -z "$TARBALL" ]; then
          echo "::error::Failed to download Trivy release asset."
          exit 1
        fi

        echo "tarball=$TARBALL" >> $GITHUB_OUTPUT

    - name: Extract Trivy
      shell: bash
      env:
        TARBALL: "${{ steps.download-trivy.outputs.tarball }}"
        TEMP_DIR: "${{ steps.create-temp-directory.outputs.temp_dir }}"
      run: |
        echo "::group::Extracting Trivy"
        tar -xzf "${TARBALL}" -C "${TEMP_DIR}"
        echo "::endgroup::"

    - name: Install Trivy
      shell: bash
      env:
        TEMP_DIR: "${{ steps.create-temp-directory.outputs.temp_dir }}"
        INSTALL_DIR: "${{ inputs.install-dir }}"
      run: |
        echo "::group::Installing Trivy"
        sudo cp "${TEMP_DIR}/trivy" "${INSTALL_DIR}/trivy"
        sudo chmod +x "${INSTALL_DIR}/trivy"
        echo "::endgroup::"

    - name: Verify installation
      shell: bash
      run: command -v trivy

    - name: Cleanup
      if: always()
      shell: bash
      env:
        TEMP_DIR: "${{ steps.create-temp-directory.outputs.temp_dir }}"
      run: |
        echo "::group::Cleaning up temporary directory"
        rm -rf "${TEMP_DIR}"
        echo "::endgroup::"
